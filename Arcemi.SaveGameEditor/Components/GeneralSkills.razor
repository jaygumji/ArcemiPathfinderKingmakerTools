@inject CharacterViewModel Model
@inject IGameResourcesProvider Resources

<div class="row g-3 top-toolbar mt-3">
    <div class="col-md-6 btn-group">
        <label class="btn btn-info" for="search">
            <span class="oi oi-magnifying-glass"></span>
        </label>
        <input id="search" type="text" class="form-control" placeholder="Search..." @bind="SearchTerm" @bind:event="oninput" />
    </div>
</div>

<div class="row">
    <div class="col-md-6">
        <button class="btn btn-sm btn-info btn-h4" @onclick="() => OpenAddFeatAsync()">
            <span class="oi oi-plus"></span>
            Add feat from list
        </button>
    </div>
</div>

<div class="form-list">
    <div class="row">
        <div class="col-md-6">
            <label class="form-label">Name</label>
        </div>
    </div>

    @foreach (var feat in Feats) {
        <div class="row">
            <div class="col-md-6 overflow-hidden">
                <label class="form-label">@feat.DisplayName</label>
            </div>
            <div class="col-md-3">
                <button class="btn btn-sm btn-danger" title="Remove feature" @onclick="() => RemoveFeature(feat.Id)">
                    <span class="oi oi-trash"></span>
                </button>
            </div>
        </div>
    }
</div>

<Modal @ref="modalAddFeat">
    <Title>Add feat</Title>
    <Body>
        <TabControl StartIndex="0">
            <Tab Name="Search">
                <Content>
                    <Search TItem="IBlueprintMetadataEntry" Items="AvailableFeatsBase" ItemSearchable="b => b.Name.DisplayName" Context="item" OnSelect="a => AddFeatBlueprint = a.Item.Id">
                        <ResultItemTemplate>
                            @item.Name.DisplayName
                        </ResultItemTemplate>
                    </Search>
                </Content>
            </Tab>
            <Tab Name="All">
                <Content>
                    <div class="row">
                        <div class="col-md-12">
                            <label class="form-label">Feat</label>
                            <select class="form-control" @bind="AddFeatBlueprint">
                                <option value="">Select feat...</option>
                                @foreach (var blueprint in AvailableFeatsBase) {
                                    <option value="@blueprint.Id">@blueprint.DisplayName</option>
                                }
                            </select>
                        </div>
                    </div>
                </Content>
            </Tab>
        </TabControl>
    </Body>
    <Footer>
        <button type="button" class="btn btn-primary" data-dismiss="modal" disabled="@AddFeatIsInvalid" @onclick="AddFeatAsync">
            Confirm
        </button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => modalAddFeat.CloseAsync()">Cancel</button>
    </Footer>
</Modal>


@code {
    [Parameter]
    public IGameManagementMemberModelEntry Unit { get; set; }

    private PlayerLeaderModel Wotr => ((Arcemi.Models.PathfinderWotr.WotrGameManagementMemberModelEntry)Unit).Model;

    private IEnumerable<IBlueprintMetadataEntry> Feats => Wotr.Skills
        .Select(s => Resources.Blueprints.Get(s))
        .Where(f => SearchTerm.IsEmpty() || f.DisplayName.ILike(SearchTerm))
        .OrderBy(s => s.DisplayName);

    private IEnumerable<IBlueprintMetadataEntry> AvailableFeatsBase => Resources.Blueprints.GetEntries(BlueprintTypeId.MemberSkill)
        .Where(IsValidFeat)
        .Where(f => !Wotr.Skills.Contains(f.Id, StringComparer.Ordinal))
        .OrderBy(s => s.DisplayName);

    private string SearchTerm;

    private Modal modalAddFeat;
    private string AddFeatBlueprint;
    private bool AddFeatIsInvalid => string.IsNullOrEmpty(AddFeatBlueprint);

    private bool IsValidFeat(IBlueprintMetadataEntry x)
    {
        return true;
    }

    private async Task OpenAddFeatAsync()
    {
        await modalAddFeat.OpenAsync();
    }

    private async Task AddFeatAsync()
    {
        if (!IsDuplicateBlueprintId(AddFeatBlueprint)) {
            Wotr.Skills.Add(AddFeatBlueprint);
        }

        await modalAddFeat.CloseAsync();
    }

    private bool IsDuplicateBlueprintId(string blueprint)
    {
        var feats = Wotr.Skills.Where(f => f.Eq(blueprint));
        return feats.Any();
    }

    private void RemoveFeature(string feature)
    {
        Wotr.Skills.Remove(feature);
    }

}