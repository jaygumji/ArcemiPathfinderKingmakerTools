@inject ArmiesViewModel Model
@inject IGameResourcesProvider Resources

@if (!Model.HasArmies) {
    <p class="alert alert-info">No armies found.</p>
}
else {
    <ul class="portraits leaders">
        @foreach (var unit in Model.Armies) {
        <li @onclick="() => SelectArmy(unit)" class="@(Unit == unit ? "toggled" : "")">
            <img src="file://@Model.FindLeaderPortrait(unit)" alt="Portrait" />
            <span>@unit.Data.ArmyName.Name</span>
        </li>
        }
    </ul>
    @if (Unit != null) {
        <div class="row g-3">
            <div class="col-md-6">
                <label class="form-label">Name</label>
                <input class="form-control" type="text" @bind="@Unit.Data.ArmyName.Name" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Type</label>
                <input class="form-control" type="text" readonly="readonly" value="@Unit.ArmyType" />
            </div>
        </div>
        <div class="row g-3">
            <div class="col-md-6">
                <label class="form-label">Leader</label>
                <input class="form-control" type="text" readonly="readonly" value="@Unit.Data.LeaderGuid" />
            </div>
        </div>
        <div class="row g-3">
            <div class="col-md-3">
                <label class="form-label">Movement points</label>
                <input class="form-control" type="number" @bind="@Unit.MovementPointsRounded" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Morale</label>
                <input class="form-control" type="number" @bind="@Unit.Data.ArmyMorale.Value" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Max squad count</label>
                <input class="form-control" type="number" @bind="@Unit.Data.MaxSquadsCount.BaseValue" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <h3>
                    Army units
                    <button class="btn btn-sm btn-info" disabled="@(!CanAddDefaultArmyUnit)" @onclick="() => modalAddArmyUnit.OpenAsync()">
                        <span class="oi oi-plus"></span>
                    </button>
                </h3>
                <Modal @ref="modalAddArmyUnit">
                    <Title>Add army unit</Title>
                    <Body>
                        <div class="row g-3">
                            <div class="col-md-12">
                                <label for="add-unit-type" class="form-label">Known Types</label>
                                <Help Size="ElementSize.Small" Position="TooltipPosition.BottomRight">
                                    The army units that's loaded from the game resources does not have the same name in game.
                                    So don't expect the army unit name to be the same as in game. It's usually similar though.
                                </Help>
                                <select id="add-unit-type" class="form-control" @bind="KnownArmyUnitBlueprint">
                                    <option value="">Select army unit...</option>
                                    @foreach (var type in AllArmyUnitTypes) {
                                        <option value="@type.Id">@type.Name</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="row g-3">
                            <div class="col-md-12">
                                <label class="form-label">Custom Blueprint</label>
                                <Help Size="ElementSize.Small" Position="TooltipPosition.BottomRight">
                                    All army units should be listed, especially if you have the game folder configured.
                                    This is a fallback if the the army unit for some reason doesn't show.
                                </Help>
                                <input type="text" class="form-control" disabled="@IsCustomArmyUnitBlueprintDisabled" @bind="CustomArmyUnitBlueprint" />
                            </div>
                        </div>
                        <div class="row g-3">
                            <div class="col-md-12">
                                <label class="form-label">Size</label>
                                <Help Size="ElementSize.Small" Position="TooltipPosition.BottomRight">
                                    The size of the army unit. A large unit takes up 4 slots.
                                    If this is incorrect, then the unit will be invisible in game.
                                    If your army can't fit the large unit, it will not be added.
                                </Help>
                                <select class="form-control" disabled="@IsArmyUnitSizeDisabled" @bind="ArmyUnitSize">
                                    <option value="Default">Default</option>
                                    <option value="Large">Large</option>
                                </select>
                            </div>
                        </div>
                    </Body>
                    <Footer>
                        <button type="button" class="btn btn-primary" data-dismiss="modal" disabled="@(!IsArmyUnitInputValid)" @onclick="() => AddArmyUnitAsync()">Confirm</button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => modalAddArmyUnit.CloseAsync()">Cancel</button>
                    </Footer>
                </Modal>
            </div>
        </div>
        @if (!CanAddDefaultArmyUnit) {
            <div class="row">
                <div class="col-md-12">
                    <p class="alert alert-danger">
                        Army is full, you can not add any more units.
                    </p>
                </div>
            </div>
}
        else if (!CanAddLargeArmyUnit) {
            <div class="row">
                <div class="col-md-12">
                    <p class="alert alert-warning">
                        There is no space for large army units.
                    </p>
                </div>
            </div>
        }

        <div class="army-unit-grid-container">
            <div class="army-unit-slot">
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
            </div>
            <div class="army-unit-default">
                @foreach (var row in Army.DefaultSizePosition.Reverse()) {
                    @foreach (var unit in row) {
                    <div class="@(unit == null ? "empty" : "")">
                        <div>@unit?.Name</div>
                        <div>
                            @if (unit != null) {
                                <input type="number" class="form-control" @bind="unit.Squad.Count" />
                            }
                        </div>
                        <button class="btn btn-sm btn-danger" @onclick="() => Army.RemoveArmyUnit(unit)">
                            <span class="oi oi-trash"></span>
                        </button>
                    </div>
                    }
                }
            </div>
            <div class="army-unit-large-even">
                @for (var i = 0; i < 6; i+=2) {
                    var unit = Army.LargeSizePosition[i];
                    <div class="army-unit-slot-large @(unit == null ? "empty" : "")">
                        <div>@unit?.Name</div>
                        <div>
                            @if (unit != null) {
                                <input type="number" class="form-control" @bind="unit.Squad.Count" />
                            }
                        </div>
                        <button class="btn btn-sm btn-danger" @onclick="() => Army.RemoveArmyUnit(unit)">
                            <span class="oi oi-trash"></span>
                        </button>
                    </div>
                }
            </div>
            <div class="army-unit-large-odd">
                @for (var i = 1; i < 6; i+=2) {
                    var unit = Army.LargeSizePosition[i];
                    <div class="army-unit-slot-large @(unit == null ? "empty" : "")">
                        <div>@unit?.Name</div>
                        <div>
                            @if (unit != null) {
                                <input type="number" class="form-control" @bind="unit.Squad.Count" />
                            }
                        </div>
                        <button class="btn btn-sm btn-danger" @onclick="() => Army.RemoveArmyUnit(unit)">
                            <span class="oi oi-trash"></span>
                        </button>
                    </div>
                }
            </div>
        </div>
    }
}

@code {
    private PlayerArmyModel Unit;
    private ArmyViewModel Army;

    private Modal modalAddArmyUnit;
    private const int MaxSquadCount = 14;

    private IEnumerable<ArmyUnitDataMapping> AllArmyUnitTypes;

    private bool IsArmyUnitSizeDisabled => KnownArmyUnit != null
        && KnownArmyUnit.Size != ArmyUnitSize.Unknown;

    private string _KnownArmyUnitBlueprint = "";
    private string KnownArmyUnitBlueprint
    {
        get => _KnownArmyUnitBlueprint;
        set {
            _KnownArmyUnitBlueprint = value;
            if (string.IsNullOrEmpty(value)) {
                KnownArmyUnit = null;
                ArmyUnitSize = ArmyUnitSize.Default;
            }
            else {
                KnownArmyUnit = AllArmyUnitTypes.First(x => string.Equals(x.Id, value, StringComparison.OrdinalIgnoreCase));
                if (KnownArmyUnit.Size == ArmyUnitSize.Unknown) {
                    ArmyUnitSize = ArmyUnitSize.Default;
                }
                else {
                    ArmyUnitSize = KnownArmyUnit.Size;
                }
            }
        }
    }

    private bool IsCustomArmyUnitBlueprintDisabled => !string.IsNullOrEmpty(KnownArmyUnitBlueprint);
    private string CustomArmyUnitBlueprint;
    private ArmyUnitSize ArmyUnitSize;
    private ArmyUnitDataMapping KnownArmyUnit;
    private bool IsArmyUnitInputValid => (!string.IsNullOrEmpty(KnownArmyUnitBlueprint) || !string.IsNullOrEmpty(CustomArmyUnitBlueprint))
        && (CanAddLargeArmyUnit || ArmyUnitSize != ArmyUnitSize.Large);
    private bool CanAddLargeArmyUnit => Army?.FindFirstAvailablePosition(ArmyUnitSize.Large) >= 0;
    private bool CanAddDefaultArmyUnit => Army?.FindFirstAvailablePosition(ArmyUnitSize.Default) >= 0;

    private async Task AddArmyUnitAsync()
    {
        var blueprint = string.IsNullOrEmpty(KnownArmyUnitBlueprint)
            ? CustomArmyUnitBlueprint
            : KnownArmyUnitBlueprint;

        Army.AddArmyUnit(blueprint, ArmyUnitSize, 10);

        await modalAddArmyUnit.CloseAsync();
        KnownArmyUnitBlueprint = "";
        CustomArmyUnitBlueprint = "";
    }

    protected override void OnInitialized()
    {
        var unmappedArmyUnits = Resources.GetAvailableArmyUnits()
            .Where(x => !Resources.Mappings.ArmyUnits.ContainsKey(x.Id))
            .Select(x => new ArmyUnitDataMapping { Id = x.Id, Name = x.DisplayName, Size = ArmyUnitSize.Unknown })
            .ToArray();

        AllArmyUnitTypes = Resources.Mappings.ArmyUnits.Values.Concat(unmappedArmyUnits).OrderBy(x => x.Name);
    }

    public void SelectArmy(PlayerArmyModel unit)
    {
        Unit = unit;
        Army = new ArmyViewModel(Resources, unit);
    }
}